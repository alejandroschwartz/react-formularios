{"version":3,"sources":["components/utils/ItemOne.jsx","components/FormOne.jsx","components/FormTwo.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["ItemOne","this","props","id","name","mail","tel","className","onClick","deleteOp","React","Component","FormOne","prop","state","users","e","nameInput","document","getElementById","mailInput","telInput","newUser","Date","getTime","value","unshift","setState","userIndex","map","filaId","indexOf","splice","type","add","bind","user","key","toUpperCase","delete","FormTwo","username","languaje","about","message","color","gender","acept","target","checked","validate","htmlFor","onChange","save","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9f85e330.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport '../../assets/styles/ItemOne.scss'; \r\n\r\nclass ItemOne extends React.Component {\r\n\r\n    // static defaultProps = {\r\n    //     mails: 'Invitado'\r\n    // }\r\n\r\n    render() {\r\n\r\n        let id = this.props.id\r\n        let name = this.props.name\r\n        let mail = this.props.mail\r\n        let tel = this.props.tel\r\n\r\n        return (\r\n            <li>\r\n                { this.props.name } - { this.props.mail } ({ this.props.tel })\r\n                <button className='button_delete' \r\n                        onClick={ () => this.props.deleteOp(this.props.id) } > Borrar </button>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\n// Item.propTypes = {\r\n//     name: PropTypes.string.isRequired,\r\n//     tel: PropTypes.number.isRequired,\r\n//     mail: PropTypes.string.isRequired,\r\n//     deleteOp: PropTypes.func.isRequired\r\n// }\r\n\r\nexport default ItemOne;","import React, { Component } from 'react';\r\nimport '../assets/FormOne.scss';\r\nimport ItemOne from './utils/ItemOne';\r\n\r\nclass FormOne extends Component {\r\n\r\n    constructor(prop) {\r\n        super(prop)\r\n\r\n        this.state = {\r\n            users: [\r\n\r\n            ]\r\n        }\r\n    }\r\n\r\n    add(e) {\r\n        const nameInput = document.getElementById('name')\r\n        const mailInput = document.getElementById('mail')\r\n        const telInput = document.getElementById('tel')\r\n        \r\n        let newUser = {\r\n            id: new Date().getTime(),\r\n            name: nameInput.value,\r\n            mail: mailInput.value,\r\n            tel: telInput.value,\r\n        }\r\n\r\n        let users = this.state.users\r\n        users.unshift(newUser)\r\n\r\n        this.setState({\r\n            users: users\r\n        })\r\n    }\r\n\r\n    delete(id) {\r\n\r\n        let userIndex = this.state.users.map( filaId => {return filaId.id} ).indexOf(id)\r\n        let users = this.state.users\r\n        users.splice(userIndex, 1)\r\n\r\n        this.setState({\r\n            users: users\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='container_form' >\r\n                <label>Nombre:</label>\r\n                <input type=\"text\" id='name' />\r\n\r\n                <label>Mail:</label>\r\n                <input type=\"text\" id='mail' />\r\n\r\n                <label>Mensaje:</label>\r\n                <input type=\"text\" id='tel' />\r\n\r\n                <button className='form_button' \r\n                        onClick={ this.add.bind(this) } >Agregar</button>\r\n\r\n                <ul>\r\n                    { this.state.users.map(user => {\r\n                        return <ItemOne \r\n                            key={ user.id }\r\n                            id={ user.id }\r\n                            name={ user.name.toUpperCase() } \r\n                            mail={ user.mail }\r\n                            tel={ user.tel }\r\n                            deleteOp={ this.delete.bind(this) }\r\n                        />\r\n                    }) }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormOne;","import React, { Component } from 'react';\r\nimport '../assets/FormTwo.scss';\r\n\r\nclass FormTwo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: '',\r\n            name: '',\r\n            languaje: '',\r\n            about: '',\r\n            message: '',\r\n            color: '',\r\n            gender: '',\r\n            acept: ''\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n\r\n        if( e.target.name === 'acept' ) {\r\n            this.setState({\r\n                [e.target.name]: e.target.checked\r\n            })\r\n        } else {\r\n            this.setState({\r\n                [e.target.name]: e.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    save(e) {\r\n\r\n        if(this.validate()){\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    validate(){\r\n        if(this.state.acept != true ){\r\n            this.setState({\r\n                message: 'Acepte términos y condiciones',\r\n                color: 'messageRed'\r\n            })\r\n            return false\r\n        } else {\r\n            this.setState({\r\n                message: 'Guardado Correctamente',\r\n                color: 'messageGreen'\r\n            })\r\n            return true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='container_div' >\r\n                <label htmlFor='username' >Nombre de usuario</label>\r\n                <input  className='input_text' type=\"text\" name='username'\r\n                        value={ this.state.username }\r\n                        onChange={ this.onChange.bind(this) }\r\n                        id='username' />\r\n\r\n                <label htmlFor='name' >Nombre</label>\r\n                <input  className='input_text' type=\"text\" name='name'\r\n                        value={ this.state.name }\r\n                        onChange={ this.onChange.bind(this) }\r\n                        id='name' />\r\n\r\n                <label htmlFor=\"languaje\">Idioma</label>\r\n                <select className='input_select'\r\n                        name=\"\" id=\"languaje\" \r\n                        value={ this.state.languaje }\r\n                        onChange={ this.onChange.bind(this) }>\r\n                    <option value=\"\">Seccione valor</option>\r\n                    <option value=\"en\">Ingles</option>\r\n                    <option value=\"es\">Español</option>\r\n                    <option value=\"de\">Aleman</option>\r\n                </select>\r\n\r\n                <label htmlFor=\"gender\">Genero</label>\r\n                <div>\r\n                    <input  className='radio'\r\n                            type=\"radio\" value='m'\r\n                            onChange={ this.onChange.bind(this) }\r\n                            name=\"gender\" />Hombre\r\n                    <input  className='radio'\r\n                            type=\"radio\" value='w' \r\n                            onChange={ this.onChange.bind(this) }\r\n                            name=\"gender\" />Mujer\r\n                </div>\r\n\r\n                <label htmlFor=\"about\">Cuentame algo de ti</label>\r\n                <textarea   className='textarea'\r\n                            id='about' name='about'\r\n                            value={ this.state.about }\r\n                            onChange={ this.onChange.bind(this) } ></textarea>\r\n                \r\n                <div>\r\n                    <input  type=\"checkbox\" id='acept' name='acept'\r\n                            onChange={ this.onChange.bind(this) }\r\n                            value={ this.state.acept } />\r\n                    <label htmlFor=\"acept\">Acepta términos y condiciones</label>\r\n                </div>\r\n\r\n                <button className='button'\r\n                        onClick={ this.save.bind(this) } >Guardar</button>\r\n                <span className={ this.state.color } >{ this.state.message }</span>\r\n\r\n                <div>\r\n                    <pre>{ JSON.stringify(this.state) }</pre>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormTwo; \r\n","import React from 'react';\r\nimport FormOne from '../components/FormOne';\r\nimport FormTwo from '../components/FormTwo';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => (\r\n    <div className=\"App\">\r\n        <FormOne />\r\n        <FormTwo />\r\n    </div>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './containers/App.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}